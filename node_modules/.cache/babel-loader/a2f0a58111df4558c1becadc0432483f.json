{"ast":null,"code":"import _slicedToArray from \"/Users/stevengong/temp/dragdrop-poc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stevengong/temp/dragdrop-poc/src/dragComponent.js\";\nimport React, { useState } from 'react';\nexport const DragComponent = ({\n  data,\n  sortData,\n  swap\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        idx = _useState2[0],\n        setIdx = _useState2[1];\n\n  const drag = event => {\n    console.log('dragging');\n  };\n\n  const dragStart = event => {\n    // console.log('drag start...');\n    event.dataTransfer.setData(\"Text\", event.target.id);\n    console.log(\"event.target.id is used by setIdx: \".concat(event.target.id));\n    setIdx(event.target.id);\n  };\n\n  const dragEnter = event => {// event.target.style.border = \"3px dotted red\";\n    // event.target.style.height = \"20px\";\n    // event.target.style.transitionDuration = \"400ms\";\n    // // event.target.style.transform = \"translateY(10px)\"\n    // const originItemIdx = event.dataTransfer.getData(\"Text\");\n    // console.log(`originItemIdx ${originItemIdx}`);\n    // debugger;\n    // if (event.target.id > originItemIdx) {\n    //     event.target.style.borderTop = \"10px solid darkgrey\";\n    // } else {\n    //     event.target.style.borderBottom = \"10px solid darkgrey\";\n    // }\n  };\n\n  const dragExit = event => {\n    if (event.target.id !== idx) {}\n  };\n\n  const dragOver = event => {\n    // console.log('dragOver triggered');\n    event.preventDefault(); //onDragOver\n\n    event.target.style.height = \"20px\";\n    event.target.style.transitionDuration = \"400ms\"; // event.target.style.transform = \"translateY(10px)\"\n    // const originItemIdx = event.dataTransfer.getData(\"Text\");\n    // console.log(`originItemIdx ${originItemIdx}`);\n    // debugger;\n\n    if (event.target.id !== idx) {\n      console.log(\"dragging over, current event.target.id is: \".concat(event.target.id, \", current idx is: \").concat(idx));\n\n      if (event.target.id < idx) {\n        event.target.style.borderTop = \"10px solid darkgrey\";\n        event.target.style.marginTop = \"40px\";\n      } else {\n        event.target.style.borderBottom = \"10px solid darkgrey\";\n        event.target.style.marginBottom = \"40px\";\n      }\n    }\n  };\n\n  const drop = event => {\n    // console.log('drop...');\n    event.preventDefault();\n    const origin = event.dataTransfer.getData(\"Text\");\n    const replacement = event.target.id; // debugger\n\n    swap(origin, replacement);\n    event.target.style.border = \"none\";\n    event.target.style.height = \"40px\";\n    event.target.style.padding = \"10px\";\n    event.target.style.marginButtom = \"5px\";\n    event.target.style.marginTop = \"0px\";\n    setIdx(null);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"item-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, data.map((d, idx) => React.createElement(\"div\", {\n    id: \"\".concat(idx),\n    className: \"items\",\n    key: \"item\".concat(idx),\n    draggable: true,\n    onDrag: e => drag(e),\n    onDragStart: e => dragStart(e),\n    onDragOver: event => dragOver(event),\n    onDragEnter: event => dragEnter(event),\n    onDragLeave: event => dragExit(event),\n    onDrop: event => drop(event),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, d.description)));\n};","map":{"version":3,"sources":["/Users/stevengong/temp/dragdrop-poc/src/dragComponent.js"],"names":["React","useState","DragComponent","data","sortData","swap","idx","setIdx","drag","event","console","log","dragStart","dataTransfer","setData","target","id","dragEnter","dragExit","dragOver","preventDefault","style","height","transitionDuration","borderTop","marginTop","borderBottom","marginBottom","drop","origin","getData","replacement","border","padding","marginButtom","map","d","e","description"],"mappings":";;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAAA,oBACjCJ,QAAQ,CAAC,IAAD,CADyB;AAAA;AAAA,QAChDK,GADgD;AAAA,QAC3CC,MAD2C;;AAEvD,QAAMC,IAAI,GAAIC,KAAD,IAAW;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,GAFD;;AAGA,QAAMC,SAAS,GAAIH,KAAD,IAAW;AACzB;AACAA,IAAAA,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2B,MAA3B,EAAmCL,KAAK,CAACM,MAAN,CAAaC,EAAhD;AACAN,IAAAA,OAAO,CAACC,GAAR,8CAAkDF,KAAK,CAACM,MAAN,CAAaC,EAA/D;AAEAT,IAAAA,MAAM,CAACE,KAAK,CAACM,MAAN,CAAaC,EAAd,CAAN;AACH,GAND;;AAQA,QAAMC,SAAS,GAAGR,KAAK,IAAI,CACvB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAdD;;AAgBA,QAAMS,QAAQ,GAAGT,KAAK,IAAI;AACtB,QAAIA,KAAK,CAACM,MAAN,CAAaC,EAAb,KAAoBV,GAAxB,EAA6B,CAAE;AAElC,GAHD;;AAKA,QAAMa,QAAQ,GAAIV,KAAD,IAAW;AACxB;AACAA,IAAAA,KAAK,CAACW,cAAN,GAFwB,CAIxB;;AACAX,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBC,MAAnB,GAA4B,MAA5B;AACAb,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBE,kBAAnB,GAAwC,OAAxC,CANwB,CAOxB;AAEA;AACA;AACA;;AAEA,QAAId,KAAK,CAACM,MAAN,CAAaC,EAAb,KAAoBV,GAAxB,EAA6B;AACzBI,MAAAA,OAAO,CAACC,GAAR,sDAA0DF,KAAK,CAACM,MAAN,CAAaC,EAAvE,+BAA8FV,GAA9F;;AACA,UAAIG,KAAK,CAACM,MAAN,CAAaC,EAAb,GAAkBV,GAAtB,EAA2B;AACvBG,QAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBG,SAAnB,GAA+B,qBAA/B;AACAf,QAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBI,SAAnB,GAA+B,MAA/B;AACH,OAHD,MAGO;AACHhB,QAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBK,YAAnB,GAAkC,qBAAlC;AACAjB,QAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBM,YAAnB,GAAkC,MAAlC;AACH;AACJ;AACJ,GAvBD;;AAyBA,QAAMC,IAAI,GAAInB,KAAD,IAAW;AACpB;AACAA,IAAAA,KAAK,CAACW,cAAN;AACA,UAAMS,MAAM,GAAGpB,KAAK,CAACI,YAAN,CAAmBiB,OAAnB,CAA2B,MAA3B,CAAf;AACA,UAAMC,WAAW,GAAGtB,KAAK,CAACM,MAAN,CAAaC,EAAjC,CAJoB,CAKpB;;AACAX,IAAAA,IAAI,CAACwB,MAAD,EAASE,WAAT,CAAJ;AACAtB,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBW,MAAnB,GAA4B,MAA5B;AACAvB,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBC,MAAnB,GAA4B,MAA5B;AACAb,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBY,OAAnB,GAA6B,MAA7B;AACAxB,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBa,YAAnB,GAAkC,KAAlC;AACAzB,IAAAA,KAAK,CAACM,MAAN,CAAaM,KAAb,CAAmBI,SAAnB,GAA+B,KAA/B;AACAlB,IAAAA,MAAM,CAAC,IAAD,CAAN;AACH,GAbD;;AAeA,SAAQ;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEAJ,IAAI,CAACgC,GAAL,CAAS,CAACC,CAAD,EAAI9B,GAAJ,KACL;AAAK,IAAA,EAAE,YAAKA,GAAL,CAAP;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,GAAG,gBAASA,GAAT,CAFP;AAGI,IAAA,SAAS,EAAE,IAHf;AAII,IAAA,MAAM,EAAG+B,CAAD,IAAO7B,IAAI,CAAC6B,CAAD,CAJvB;AAKI,IAAA,WAAW,EAAEA,CAAC,IAAIzB,SAAS,CAACyB,CAAD,CAL/B;AAMI,IAAA,UAAU,EAAE5B,KAAK,IAAIU,QAAQ,CAACV,KAAD,CANjC;AAOI,IAAA,WAAW,EAAEA,KAAK,IAAIQ,SAAS,CAACR,KAAD,CAPnC;AAQI,IAAA,WAAW,EAAEA,KAAK,IAAIS,QAAQ,CAACT,KAAD,CARlC;AASI,IAAA,MAAM,EAAEA,KAAK,IAAImB,IAAI,CAACnB,KAAD,CATzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUK2B,CAAC,CAACE,WAVP,CADJ,CAFA,CAAR;AAkBH,CA5FM","sourcesContent":["\n\nimport React, { useState } from 'react';\nexport const DragComponent = ({ data, sortData, swap }) => {\n    const [idx, setIdx] = useState(null);\n    const drag = (event) => {\n        console.log('dragging');\n    }\n    const dragStart = (event) => {\n        // console.log('drag start...');\n        event.dataTransfer.setData(\"Text\", event.target.id);\n        console.log(`event.target.id is used by setIdx: ${event.target.id}`);\n\n        setIdx(event.target.id);\n    }\n\n    const dragEnter = event => {\n        // event.target.style.border = \"3px dotted red\";\n        // event.target.style.height = \"20px\";\n        // event.target.style.transitionDuration = \"400ms\";\n        // // event.target.style.transform = \"translateY(10px)\"\n\n        // const originItemIdx = event.dataTransfer.getData(\"Text\");\n        // console.log(`originItemIdx ${originItemIdx}`);\n        // debugger;\n        // if (event.target.id > originItemIdx) {\n        //     event.target.style.borderTop = \"10px solid darkgrey\";\n        // } else {\n        //     event.target.style.borderBottom = \"10px solid darkgrey\";\n        // }\n    }\n\n    const dragExit = event => {\n        if (event.target.id !== idx) {}\n        \n    }\n\n    const dragOver = (event) => {\n        // console.log('dragOver triggered');\n        event.preventDefault();\n\n        //onDragOver\n        event.target.style.height = \"20px\";\n        event.target.style.transitionDuration = \"400ms\";\n        // event.target.style.transform = \"translateY(10px)\"\n\n        // const originItemIdx = event.dataTransfer.getData(\"Text\");\n        // console.log(`originItemIdx ${originItemIdx}`);\n        // debugger;\n\n        if (event.target.id !== idx) {\n            console.log(`dragging over, current event.target.id is: ${event.target.id}, current idx is: ${idx}`);\n            if (event.target.id < idx) {\n                event.target.style.borderTop = \"10px solid darkgrey\";\n                event.target.style.marginTop = \"40px\";\n            } else {\n                event.target.style.borderBottom = \"10px solid darkgrey\";\n                event.target.style.marginBottom = \"40px\";\n            }\n        }\n    }\n\n    const drop = (event) => {\n        // console.log('drop...');\n        event.preventDefault();\n        const origin = event.dataTransfer.getData(\"Text\");\n        const replacement = event.target.id;\n        // debugger\n        swap(origin, replacement);\n        event.target.style.border = \"none\";\n        event.target.style.height = \"40px\";\n        event.target.style.padding = \"10px\";\n        event.target.style.marginButtom = \"5px\";\n        event.target.style.marginTop = \"0px\";\n        setIdx(null);\n    }\n\n    return (<div className=\"item-container\">\n        {\n            data.map((d, idx) =>\n                <div id={`${idx}`}\n                    className=\"items\"\n                    key={`item${idx}`}\n                    draggable={true}\n                    onDrag={(e) => drag(e)}\n                    onDragStart={e => dragStart(e)}\n                    onDragOver={event => dragOver(event)}\n                    onDragEnter={event => dragEnter(event)}\n                    onDragLeave={event => dragExit(event)}\n                    onDrop={event => drop(event)}>\n                    {d.description}\n                </div>\n            )\n        }\n    </div >)\n}"]},"metadata":{},"sourceType":"module"}